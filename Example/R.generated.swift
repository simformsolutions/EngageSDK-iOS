//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import EngageSDK
import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `Roboto-Bold`.
    static let robotoBold = Rswift.FontResource(fontName: "Roboto-Bold")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")
    
    /// `UIFont(name: "Roboto-Bold", size: ...)`
    static func robotoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBold, size: size)
    }
    
    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }
    
    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }
    
    static func validate() throws {
      if R.font.robotoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Bold' could not be loaded, is 'Roboto-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'RobotoMedium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'RobotoRegular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 26 images.
  struct image {
    /// Image `apiKey`.
    static let apiKey = Rswift.ImageResource(bundle: R.hostingBundle, name: "apiKey")
    /// Image `appLogo`.
    static let appLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "appLogo")
    /// Image `autoRefreshInterval`.
    static let autoRefreshInterval = Rswift.ImageResource(bundle: R.hostingBundle, name: "autoRefreshInterval")
    /// Image `autorefreshContent`.
    static let autorefreshContent = Rswift.ImageResource(bundle: R.hostingBundle, name: "autorefreshContent")
    /// Image `backArrow`.
    static let backArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "backArrow")
    /// Image `backgroundModelOff`.
    static let backgroundModelOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "backgroundModelOff")
    /// Image `backgroundModelOn`.
    static let backgroundModelOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "backgroundModelOn")
    /// Image `beaconUUID`.
    static let beaconUUID = Rswift.ImageResource(bundle: R.hostingBundle, name: "beaconUUID")
    /// Image `checkCircle`.
    static let checkCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkCircle")
    /// Image `checkMarkSquare`.
    static let checkMarkSquare = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkMarkSquare")
    /// Image `checkMark`.
    static let checkMark = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkMark")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `editProfile`.
    static let editProfile = Rswift.ImageResource(bundle: R.hostingBundle, name: "editProfile")
    /// Image `info`.
    static let info = Rswift.ImageResource(bundle: R.hostingBundle, name: "info")
    /// Image `locationOn`.
    static let locationOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "locationOn")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `notificationOn`.
    static let notificationOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "notificationOn")
    /// Image `notificationsOff`.
    static let notificationsOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "notificationsOff")
    /// Image `powerIcon`.
    static let powerIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "powerIcon")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `snoozeContentOff`.
    static let snoozeContentOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "snoozeContentOff")
    /// Image `snoozeContentOn`.
    static let snoozeContentOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "snoozeContentOn")
    /// Image `snoozeNotification`.
    static let snoozeNotification = Rswift.ImageResource(bundle: R.hostingBundle, name: "snoozeNotification")
    /// Image `unCheckMark`.
    static let unCheckMark = Rswift.ImageResource(bundle: R.hostingBundle, name: "unCheckMark")
    /// Image `uncheckCircle`.
    static let uncheckCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "uncheckCircle")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    
    /// `UIImage(named: "apiKey", bundle: ..., traitCollection: ...)`
    static func apiKey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.apiKey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "appLogo", bundle: ..., traitCollection: ...)`
    static func appLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "autoRefreshInterval", bundle: ..., traitCollection: ...)`
    static func autoRefreshInterval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.autoRefreshInterval, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "autorefreshContent", bundle: ..., traitCollection: ...)`
    static func autorefreshContent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.autorefreshContent, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backArrow", bundle: ..., traitCollection: ...)`
    static func backArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backgroundModelOff", bundle: ..., traitCollection: ...)`
    static func backgroundModelOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backgroundModelOff, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backgroundModelOn", bundle: ..., traitCollection: ...)`
    static func backgroundModelOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backgroundModelOn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "beaconUUID", bundle: ..., traitCollection: ...)`
    static func beaconUUID(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.beaconUUID, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkCircle", bundle: ..., traitCollection: ...)`
    static func checkCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkCircle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkMark", bundle: ..., traitCollection: ...)`
    static func checkMark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkMark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkMarkSquare", bundle: ..., traitCollection: ...)`
    static func checkMarkSquare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkMarkSquare, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "editProfile", bundle: ..., traitCollection: ...)`
    static func editProfile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editProfile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "info", bundle: ..., traitCollection: ...)`
    static func info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "locationOn", bundle: ..., traitCollection: ...)`
    static func locationOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationOn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "notificationOn", bundle: ..., traitCollection: ...)`
    static func notificationOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationOn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "notificationsOff", bundle: ..., traitCollection: ...)`
    static func notificationsOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationsOff, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "powerIcon", bundle: ..., traitCollection: ...)`
    static func powerIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.powerIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "snoozeContentOff", bundle: ..., traitCollection: ...)`
    static func snoozeContentOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snoozeContentOff, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "snoozeContentOn", bundle: ..., traitCollection: ...)`
    static func snoozeContentOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snoozeContentOn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "snoozeNotification", bundle: ..., traitCollection: ...)`
    static func snoozeNotification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snoozeNotification, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unCheckMark", bundle: ..., traitCollection: ...)`
    static func unCheckMark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unCheckMark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "uncheckCircle", bundle: ..., traitCollection: ...)`
    static func uncheckCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uncheckCircle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 6 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `EmptyTableViewCell`.
    static let emptyTableViewCell: Rswift.ReuseIdentifier<EmptyTableViewCell> = Rswift.ReuseIdentifier(identifier: "EmptyTableViewCell")
    /// Reuse identifier `HomeTableViewCell`.
    static let homeTableViewCell: Rswift.ReuseIdentifier<EngageSDK.ListTableViewCell> = Rswift.ReuseIdentifier(identifier: "HomeTableViewCell")
    /// Reuse identifier `InterestsTableViewCell`.
    static let interestsTableViewCell: Rswift.ReuseIdentifier<InterestsTableViewCell> = Rswift.ReuseIdentifier(identifier: "InterestsTableViewCell")
    /// Reuse identifier `PopupCollectionViewCell`.
    static let popupCollectionViewCell: Rswift.ReuseIdentifier<PopupCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PopupCollectionViewCell")
    /// Reuse identifier `PrimaryTableViewCell`.
    static let primaryTableViewCell: Rswift.ReuseIdentifier<PrimaryTableViewCell> = Rswift.ReuseIdentifier(identifier: "PrimaryTableViewCell")
    /// Reuse identifier `SecondryTableViewCell`.
    static let secondryTableViewCell: Rswift.ReuseIdentifier<SecondaryTableViewCell> = Rswift.ReuseIdentifier(identifier: "SecondryTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "appLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let detailViewController = StoryboardViewControllerResource<DetailViewController>(identifier: "DetailViewController")
      let homeNav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "HomeNav")
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let loginNav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "LoginNav")
      let name = "Main"
      let popUpViewController = StoryboardViewControllerResource<PopUpViewController>(identifier: "PopUpViewController")
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")
      let registerViewController = StoryboardViewControllerResource<RegisterViewController>(identifier: "RegisterViewController")
      let restartNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "RestartNavigationController")
      let restartViewController = StoryboardViewControllerResource<RestartViewController>(identifier: "RestartViewController")
      let settingNav = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "SettingNav")
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")
      let splashScreenViewController = StoryboardViewControllerResource<SplashScreenViewController>(identifier: "SplashScreenViewController")
      let welcomeViewController = StoryboardViewControllerResource<WelcomeViewController>(identifier: "WelcomeViewController")
      let yourInterestsViewController = StoryboardViewControllerResource<YourInterestsViewController>(identifier: "YourInterestsViewController")
      
      func detailViewController(_: Void = ()) -> DetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailViewController)
      }
      
      func homeNav(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeNav)
      }
      
      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }
      
      func loginNav(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginNav)
      }
      
      func popUpViewController(_: Void = ()) -> PopUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popUpViewController)
      }
      
      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }
      
      func registerViewController(_: Void = ()) -> RegisterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerViewController)
      }
      
      func restartNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restartNavigationController)
      }
      
      func restartViewController(_: Void = ()) -> RestartViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restartViewController)
      }
      
      func settingNav(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingNav)
      }
      
      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }
      
      func splashScreenViewController(_: Void = ()) -> SplashScreenViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashScreenViewController)
      }
      
      func welcomeViewController(_: Void = ()) -> WelcomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: welcomeViewController)
      }
      
      func yourInterestsViewController(_: Void = ()) -> YourInterestsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: yourInterestsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "appLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appLogo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backArrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkCircle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkCircle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkMark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkMark' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkMarkSquare", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkMarkSquare' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "editProfile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'editProfile' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'info' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logout' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "settings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'settings' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unCheckMark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unCheckMark' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "uncheckCircle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'uncheckCircle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().detailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailViewController' could not be loaded from storyboard 'Main' as 'DetailViewController'.") }
        if _R.storyboard.main().homeNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeNav' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
        if _R.storyboard.main().loginNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginNav' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().popUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popUpViewController' could not be loaded from storyboard 'Main' as 'PopUpViewController'.") }
        if _R.storyboard.main().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'Main' as 'ProfileViewController'.") }
        if _R.storyboard.main().registerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerViewController' could not be loaded from storyboard 'Main' as 'RegisterViewController'.") }
        if _R.storyboard.main().restartNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restartNavigationController' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().restartViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restartViewController' could not be loaded from storyboard 'Main' as 'RestartViewController'.") }
        if _R.storyboard.main().settingNav() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingNav' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Main' as 'SettingsViewController'.") }
        if _R.storyboard.main().splashScreenViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashScreenViewController' could not be loaded from storyboard 'Main' as 'SplashScreenViewController'.") }
        if _R.storyboard.main().welcomeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'welcomeViewController' could not be loaded from storyboard 'Main' as 'WelcomeViewController'.") }
        if _R.storyboard.main().yourInterestsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'yourInterestsViewController' could not be loaded from storyboard 'Main' as 'YourInterestsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
